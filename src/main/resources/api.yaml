openapi: 3.0.3
info:
  title: Shop
  description: Shop API built using OpenAPI and Swagger
  version: 1.0.0
servers:
  - url: 'https:localhost:8080'
paths:
  /products:
    get:
      tags:
        - product
      summary: Lists all the products
      description: Lists all the products
      operationId: readAll
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductDtoRead'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductDtoRead'
      security:
        - shop_auth:
            - write:products
            - read:products
    put:
      tags:
        - product
      summary: Update an existing product
      description: Update an existing product
      operationId: updateProduct
      requestBody:
        description: product object with desired values
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDtoRead'
          application/xml:
            schema:
              $ref: '#/components/schemas/ProductDtoRead'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductDtoRead'
        required: true
      responses:
        '404':
          description: Product not found
        '405':
          description: Invalid input
      security:
        - shop_auth:
            - write:products
            - read:products
    post:
      tags:
        - product
      summary: Add a product
      description: Add a new product to the shop
      operationId: addProduct
      requestBody:
        description: Create a new product in the shop
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDtoWrite'
          application/xml:
            schema:
              $ref: '#/components/schemas/ProductDtoWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductDtoWrite'
        required: true
      responses:
        '200':
          description: Succesful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDtoRead'
            application/xml:
              schema:
                $ref: '#/components/schemas/ProductDtoRead'
        '405':
          description: Invalid input
      security:
        - shop_auth:
            - write:products
            - read:products
  /products/findByCategory:
    get:
      tags:
        - product
      summary: Find products by category
      description: Returns all products matching the specified category
      operationId: findProductsByCategory
      parameters:
        - name: category
          in: query
          description: Category to filter by
          required: true
          explode: true
          schema:
            type: string
            enum:
              - fruit
              - vegetables
              - dairy products
              - meat
              - seafood
              - bakery items
              - snacks
              - beverages
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductDtoRead'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductDtoRead'
        '400':
          description: Invalid tag value
      security:
        - shop_auth:
            - write:products
            - read:products
  /products/{productId}:
    get:
      tags:
        - product
      summary: Find product by ID
      description: Returns a single product
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          description: ID of the product to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDtoRead'
            application/xml:
              schema:
                $ref: '#/components/schemas/ProductDtoRead'
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
      security:
        - product_auth:
            - write:products
            - read:products
    patch:
      tags:
        - product
      summary: Updates a product in the store
      description: ''
      operationId: updateProductWithForm
      parameters:
        - name: productId
          in: path
          description: ID of product to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: New name of specified product
          schema:
            type: string
        - name: price
          in: query
          description: New price of product
          schema:
            type: number
            format: float
        - name: category
          in: query
          description: New category of product
          schema:
            type: string
            enum:
              - fruit
              - vegetables
              - dairy products
              - meat
              - seafood
              - bakery items
              - snacks
              - beverages
        - name: expiryDate
          in: query
          description: New expiry date of product
          schema:
            type: string
            format: date-time
      responses:
        '404':
          description: Product not found
        '405':
          description: Invalid input
      security:
        - shop_auth:
            - write:products
            - read:products
    delete:
      tags:
        - product
      summary: Deletes a product
      description: delete a product
      operationId: deleteProduct
      parameters:
        - name: productId
          in: path
          description: ID of product to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid product value
      security:
        - shop_auth:
            - write:products
            - read:products

components:
  schemas:
    ProductDtoRead:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: unique id of product
          example: 27
        name:
          type: string
          description: name of product
          example: milk
        price:
          type: number
          format: float
          example: 14.99
        category:
          $ref: '#/components/schemas/CategoryEnum'
        expiry_date:
          type: string
          format: date-time
      xml:
        name: productRead

    ProductDtoWrite:
      type: object
      properties:
        name:
          type: string
          description: name of product
          example: milk
        price:
          type: number
          format: float
          example: 14.99
        category:
          $ref: '#/components/schemas/CategoryEnum'
        expiry_date:
          type: string
          format: date-time
      xml:
        name: productWrite

    CategoryEnum:
      type: string
      enum:
        - fruit
        - vegetables
        - dairy products
        - meat
        - seafood
        - bakery items
        - snacks
        - beverages
